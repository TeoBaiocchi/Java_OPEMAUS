AUS - Taller de Programación III 
TP Regularización - 15/11/2023
Teo Baiocchi Ensinck

Como sé qué había múltiples maneras de interpretar la consigna, dejo una breve
explicación del enfoque elegido para que la lectura del código resulte más sencilla

Por motivos de simplicidad generé un unico paquete, en el que la clase Main se ocupa
de invocar y organizar los hilos. Dentro de esta clase, se genera un bucle que
genera 10 Hilos nuevos e invoca start() sobre ellos en cada iteración, y espera 60
segundos hasta la proxima.
Elegí hacer esto así para evitar dormir cada hilo individual, lo que podría ser más
irregular (incluso si no es apreciable en esta escala) y para poder trabajar 10 entradas
de forma simultánea.
Cuando los hilos lleguen al final del archivo bulk.txt, ya no tendrán ningún efecto,
y el primero en hacerlo marcará una variable estatica que frenará el bucle para que no 
se generen nuevos hilos y el programa se detenga.


Respecto al funcionamiento de los hilos:
Los hilos acceden al bulk mediante un BufferedReader, que es un metodo thread-safe
de leer un archivo linea por linea. Este BufferedReader es unico y esta instanciado
de forma estatica en la clase ManejadorArchivos. Esto es así porque es necesario 
que todos los hilos consulten el mismo para que el sincronismo funcione.
Luego, realizan la lógica pedida con una verificación de si el archivo existe, y utilizando
metodos de creacion / borrado.
Para poder lograr que el programa "falle" con facilidad, y poder probar el log, 
si un archivo a crear no existe (se brinda un path incorrecto), largará
un error que se registrará en el archivo de salida. 

El archivo salida.log se genera limpio con cada ejecución del programa, en el mismo
directorio donde se debe encontrar el archivo bulk.txt
